
reactiveclass Starter() {
	knownrebecs {
		
		Cpu c11;
		Cpu c21;
		Cpu c31;
		
		Cpu c12;
		Cpu c22;
		Cpu c32;
		
		Cpu c13;
		Cpu c23;
		Cpu c33;
	}
	Starter(byte senario) {
		if (senario == 1) {
			self.scenario1();
		} else if (senario == 2) {
			self.scenario2();
		}	
	}
	msgsrv scenario1() {
		//1- cpu_1_1 sends message to cpu_3_3
		c11.req(3,3,1,5);
		//2- check if message was successfully sent to cpu_3_3 after 4 seconds
		c33.checkRecieved() after(4);
	}
	msgsrv scenario2() {
		//1- cpu_1_1 and cpu_1_3 send message to cpu_2_2
		c11.req(2,2,1,5);
		c13.req(2,2,1,5);
		//2- check whether both cpu_1_1 and cpu_1_3 got ack message or not		
		c11.get_Ack(2);
		c13.get_Ack(2);
		
	}
}

reactiveclass Cpu() {
	// The body of CPU
	knownrebecs {
		Starter starter;
		Cpu N;  // : 0
		Cpu E;  // : 1
		Cpu S;  // : 2
		Cpu W;  // : 3		
	}
	
	statevars {
		boolean recieved;
		byte[4] bufNum;
		boolean[4] full;
		boolean[4] enable;
		boolean [4] outMutex;		
		byte Xid;
		byte Yid;
	}
	
	Cpu(byte X, byte Y){	
		Xid = X;
		Yid = Y;
	
		recieved = 0;

		for(int i=0;i<4;i++){		
			enable[i] = true;
			outMutex[i] = true;
			bufNum[i] = 0;
			full[i] = false;
		}
	}
	
	msgsrv reqSend(byte Xtarget, byte Ytarget, int directionS, int packId){	
		if (enable[directionS] == true){
			boolean sent = false;
					
			if(Xtarget > Xid){
				if(outMutex[1] == true){	
					E.give_Ack(Xtarget, Ytarget,directionS,3,5, packId) after(1);
					outMutex[1] = false;
					enable[directionS] = false;
					sent = true;
				}else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);
			}	
			
			else if(Xtarget < Xid){	
				if(outMutex[3] == true){
					W.give_Ack(Xtarget, Ytarget,directionS, 1, 5, packId ) after(1);	
					outMutex[3] = false;
					enable[directionS] = false;
					sent = true;
				} else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);
			}
			
			
			else if(Ytarget > Yid){	
				if(outMutex[2] == true){
					S.give_Ack(Xtarget, Ytarget,directionS, 0, 5, packId ) after(1);	
					outMutex [2] = false;
					enable[directionS] = false;
					sent = true;
				}else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);	
			}
				
			else if(Ytarget < Yid){	
				if(outMutex[0] == true){
					N.give_Ack(Xtarget, Ytarget,directionS, 2, 5 , packId) after(1);	
					outMutex[0] = false;
					enable[directionS] = false;
					sent = true;
				}else
					self.reqSend(Xtarget, Ytarget,directionS,packId) after(1);
			}

			if(sent == true){
				bufNum[directionS] = (byte)bufNum[directionS] + 1;

			}	
		} else
			self.reqSend(Xtarget, Ytarget,directionS,packId) after(1);
	}
	
	//get ack when recieve message from reciever:
	msgsrv get_Ack(int directionS){
		
		enable[directionS] = true;
		
		bufNum[directionS] = (byte)bufNum[directionS] - 1;	
		full[directionS] = false;

		if (sender == N) {
			outMutex[0] = true;
		}	
		else if (sender == E){ 
			outMutex[1] = true;
		}	
		else if (sender == S){
			outMutex[2] = true;
			}
		else if (sender == W){ 
			outMutex[3] = true;
		}	
	}
	
	//give ack when message recieve from sender:
	msgsrv give_Ack(byte Xtarget, byte Ytarget,int directionS, int directionD,int msgSender, int packId){
		int MSGSender;
		if(sender == N)
			MSGSender = 0;
		else if (sender == E)
			MSGSender = 1;
		else if (sender == S)
			MSGSender = 2;
		else if (sender == W)
			MSGSender = 3;
		else {
			MSGSender = msgSender;
		}
				
		if(!(Xtarget == Xid && Ytarget == Yid)){
				
			if (full[directionD]) //buffer is full, the packet should wait.
				self.give_Ack(Xtarget, Ytarget,directionS,directionD,MSGSender,
							 packId)after(2)deadline(3); //waiting via recalling give_ack after 2 time units.
			
			else{	
				self.reqSend(Xtarget, Ytarget,directionD, packId); 
					
				if(MSGSender == 0)
					N.get_Ack(directionS);
				else if(MSGSender == 1)		
					E.get_Ack(directionS);
				else if(MSGSender == 2)		
					S.get_Ack(directionS);
				else if(MSGSender == 3)		
					W.get_Ack(directionS);
			}		
		}		
		
		else if((Xtarget == Xid && Ytarget == Yid)){ //reach target
				
				recieved = recieved + 1;
					
				if(MSGSender == 0)
					N.get_Ack(directionS);
				else if(MSGSender == 1)		
					E.get_Ack(directionS);
				else if(MSGSender == 2)		
					S.get_Ack(directionS);
				else if(MSGSender == 3)		
					W.get_Ack(directionS);
			}
	}
	
	//check recieve:
	msgsrv checkRecieved(){
		if (recieved == 0){
			delay(5)after(1)deadline(4);
			delay(5)after(1)deadline(4);
			
		}
			
	}
	
	
}


main {
	
	// Initilize All CPUs
	Starter s(c11,c21,c31,c12,c22,c32,c13,c23,c33): (1);
	
	Cpu c11(s,null,c12,c21,null):(1,1);
	Cpu c21(s,c11,c22,c31,null):(2,1);
	Cpu c31(s,c21,c32,null,null):(3,1);
	
	Cpu c12(s,null,c13,c22,c11):(1,2);
	Cpu c22(s,c12,c23,c32,c21):(2,2);
	Cpu c32(s,c22,c33,null,c31):(3,2);
	
	Cpu c13(s,null,null,c23,c12):(1,3);
	Cpu c23(s,c13,null,c33,c22):(2,3);
	Cpu c33(s,c23,null,null,c32):(3,3);
		
}
